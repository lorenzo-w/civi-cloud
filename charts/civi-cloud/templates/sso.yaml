{{- define "hosts.idp" -}}
{{ printf "%s.%s" .Values.subdomains.keycloak .Values.domain }}
{{- end -}}
{{- define "urls.idp" -}}
{{ printf "https://%s" (include "hosts.idp" .) }}
{{- end -}}
{{- define "urls.idp_realm" -}}
{{ printf "https://%s/realms/master" (include "hosts.idp" .) }}
{{- end -}}

{{- define "urls.admin_oidc_callback" -}}
{{ printf "https://%s/realms/master/broker/admin-oidc/endpoint" (include "hosts.idp" .) }}
{{- end -}}

{{- define "hosts.oidc" -}}
{{ printf "%s.%s" .Values.subdomains.dex .Values.domain }}
{{- end -}}
{{- define "urls.oidc_issuer" -}}
{{ printf "https://%s" (include "hosts.oidc" .) }}
{{- end -}}
{{- define "urls.oidc_callback" -}}
{{ printf "https://%s/callback" (include "hosts.oidc" .) }}
{{- end -}}
{{- define "urls.oidc_token" -}}
{{ printf "https://%s/token" (include "hosts.oidc" .) }}
{{- end -}}
{{- define "urls.oidc_auth" -}}
{{ printf "https://%s/auth" (include "hosts.oidc" .) }}
{{- end -}}
{{- define "urls.oidc_jwks" -}}
{{ printf "https://%s/keys" (include "hosts.oidc" .) }}
{{- end -}}

{{- define "hosts.authproxy" -}}
{{ printf "%s.%s" .Values.subdomains.oauth2_proxy .Values.domain }}
{{- end -}}
{{- define "urls.authproxy_login" -}}
{{ printf "https://%s/oauth2/start" (include "hosts.authproxy" .) }}
{{- end -}}
{{- define "urls.authproxy_check" -}}
{{ "http://oauth2-proxy.civi-sso.svc.cluster.local/oauth2/auth" }}
{{- end -}}
{{- define "urls.authproxy_callback" -}}
{{ printf "https://%s/oauth2/callback" (include "hosts.authproxy" .) }}
{{- end -}}

{{- define "hosts.phpldapadmin" -}}
{{ printf "%s.%s" .Values.subdomains.phpldapadmin .Values.domain }}
{{- end -}}

{{- define "urls.oidc_redirects" -}}
- {{ include "urls.authproxy_callback" . }}
{{- end -}}

{{- define "names.oidc_client" -}}
{{ "local" }}
{{- end -}}
{{- define "secrets.oidc_client" -}}
{{ derivePassword 1 "maximum" .Values.secretSeed "local-oidc-client" .Values.domain | b64enc }}
{{- end -}}

{{- define "names.admin_oidc_client" -}}
{{ "local" }}
{{- end -}}
{{- define "secrets.admin_oidc_client" -}}
{{ derivePassword 1 "maximum" .Values.secretSeed "admin-oidc-client" .Values.domain | b64enc }}
{{- end -}}

{{- define "names.ldap_admin_dn" -}}
{{ printf "cn=admin,dc=%s" (.Values.domain | splitList "." | join ",dc=") | quote }}
{{- end -}}
{{- define "secrets.ldap_admin_pw" -}}
{{ derivePassword 1 "maximum" .Values.secretSeed "openldap-admin" .Values.domain | b64enc }}
{{- end -}}
{{- define "secrets.ldap_config_pw" -}}
{{ derivePassword 1 "maximum" .Values.secretSeed "openldap-config" .Values.domain | b64enc }}
{{- end -}}

{{- define "names.keycloak_admin_user" -}}
{{ "admin" }}
{{- end -}}
{{- define "secrets.keycloak_admin_pw" -}}
{{ derivePassword 1 "maximum" .Values.secretSeed "keycloak-admin" .Values.domain | b64enc }}
{{- end -}}
{{- define "names.keycloak_management_user" -}}
{{ "admin" }}
{{- end -}}
{{- define "secrets.keycloak_management_pw" -}}
{{ derivePassword 1 "maximum" .Values.secretSeed "keycloak-management" .Values.domain | b64enc }}
{{- end -}}

{{- define "dn.base" -}}
{{ printf "dc=%s" (.Values.domain | splitList "." | join ",dc=") }}
{{- end -}}
{{- define "dn.users" -}}
{{ printf "ou=users,dc=%s" (.Values.domain | splitList "." | join ",dc=") }}
{{- end -}}
{{- define "dn.groups" -}}
{{ printf "ou=groups,dc=%s" (.Values.domain | splitList "." | join ",dc=") }}
{{- end -}}
{{- define "dn.roles" -}}
{{ printf "ou=roles,dc=%s" (.Values.domain | splitList "." | join ",dc=") }}
{{- end -}}

kind: Namespace
apiVersion: v1
metadata:
  name: civi-sso
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: openldap
  namespace: civi-sso
spec:
  interval: 5m
  chart:
    spec:
      chart: openldap-stack-ha
      version: '3.0.0'
      sourceRef:
        kind: HelmRepository
        name: helm-openldap
        namespace: flux-system
  values:
    customTLS:
      enabled: false
    replicaCount: 1
    global:
      ldapDomain: {{ .Values.domain }}
      adminPassword: {{ include "secrets.ldap_admin_pw" . }}
      configPassword: {{ include "secrets.ldap_config_pw" . }}
    env:
      LDAP_ORGANISATION: {{ .Values.org.name | quote }}
    customFileSets:
      - name: bootstrap-ldif
        targetPath: /container/service/slapd/assets/config/bootstrap/ldif
        files:
          - filename: ous.ldif
            content: |
              dn: {{ include "dn.users" . }}
              objectClass: organizationalUnit
              ou: users

              dn: {{ include "dn.groups" . }}
              objectClass: organizationalUnit
              ou: groups

              dn: {{ include "dn.roles" . }}
              objectClass: organizationalUnit
              ou: roles

    ltb-passwd:
      enabled: false
    phpldapadmin:
      env:
        PHPLDAPADMIN_HTTPS: "false"
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: acme
        hosts:
          - {{ include "hosts.phpldapadmin" . }}
        tls:
          - hosts:
              - {{ include "hosts.phpldapadmin" . }}
            secretName: phpldapadmin-cert
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: keycloak
  namespace: civi-sso
spec:
  interval: 5m
  chart:
    spec:
      chart: keycloak
      version: '9.1.1'
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
  dependsOn:
    - name: openldap
      namespace: civi-sso
  values:
    auth:
      adminUser: {{ include "names.keycloak_admin_user" . }}
      adminPassword: {{ include "secrets.keycloak_admin_pw" . }}
      managementUser: {{ include "names.keycloak_management_user" . }}
      managementPassword: {{ include "secrets.keycloak_management_pw" . }}
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme
      hostname: {{ include "hosts.idp" . }}
      tls: true
    service:
      type: ClusterIP
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: keycloak-config
  namespace: civi-sso
spec:
  interval: 5m
  chart:
    spec:
      chart: keycloak-config-cli
      version: '1.2.3'
      sourceRef:
        kind: HelmRepository
        name: jkroepke
        namespace: flux-system
  dependsOn:
    - name: keycloak
      namespace: civi-sso
  values:
    image:
      tag: "5.2.0-18.0.0"
    env: 
      KEYCLOAK_URL: {{ include "urls.idp" . }}
      KEYCLOAK_USER: {{ include "names.keycloak_admin_user" . }}
      IMPORT_FILES_LOCATIONS: "/config/master.json"
    secrets:
      KEYCLOAK_PASSWORD: {{ include "secrets.keycloak_admin_pw" . }}
    config:
      master:
        inline:
          enabled: true
          realm: master
          components:
            org.keycloak.storage.UserStorageProvider:
              - id: ldap
                name: ldap
                providerId: ldap
                subComponents:
                  org.keycloak.storage.ldap.mappers.LDAPStorageMapper:
                    - name: last name
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - sn
                        is.mandatory.in.ldap:
                          - "true"
                        read.only:
                          - "false"
                        always.read.value.from.ldap:
                          - "true"
                        user.model.attribute:
                          - lastName
                    - name: first name
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - givenName
                        is.mandatory.in.ldap: 
                          - "false"
                        always.read.value.from.ldap: 
                          - "true"
                        read.only: 
                          - "false"
                        user.model.attribute: 
                          - firstName
                    - name: creation date
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - createTimestamp
                        is.mandatory.in.ldap: 
                          - "false"
                        always.read.value.from.ldap: 
                          - "true"
                        read.only: 
                          - "true"
                        user.model.attribute: 
                          - createTimestamp
                    - name: modify date
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - modifyTimestamp
                        is.mandatory.in.ldap: 
                          - "false"
                        read.only: 
                          - "true"
                        always.read.value.from.ldap: 
                          - "true"
                        user.model.attribute: 
                          - modifyTimestamp
                    - name: email
                      providerId: user-attribute-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.attribute: 
                          - mail
                        is.mandatory.in.ldap: 
                          - "false"
                        always.read.value.from.ldap: 
                          - "true"
                        read.only: 
                          - "false"
                        user.model.attribute: 
                          - email
                    - name: fullname
                      providerId: full-name-ldap-mapper
                      subComponents: {}
                      config: 
                        ldap.full.name.attribute:
                          - cn
                        read.only: 
                          - "false"
                        write.only:
                          - "true"
                    - name: groups
                      providerId: group-ldap-mapper
                      config:
                        drop.non.existing.groups.during.sync:
                          - "false"
                        group.name.ldap.attribute:
                          - cn
                        group.object.classes:
                          - groupOfNames
                        groups.dn:
                          - {{ include "dn.groups" . }}
                        groups.ldap.filter: []
                        groups.path:
                          - /
                        ignore.missing.groups:
                          - "false"
                        mapped.group.attributes: []
                        memberof.ldap.attribute:
                          - memberOf
                        membership.attribute.type:
                          - DN
                        membership.ldap.attribute:
                          - member
                        membership.user.ldap.attribute:
                          - uid
                        mode:
                          - LDAP_ONLY
                        preserve.group.inheritance:
                          - "true"
                        user.roles.retrieve.strategy:
                          - LOAD_GROUPS_BY_MEMBER_ATTRIBUTE
                    - name: roles
                      providerId: role-ldap-mapper
                      config:
                        client.id: []
                        role.name.ldap.attribute:
                          - cn
                        role.object.classes:
                          - groupOfNames
                        roles.dn:
                          - {{ include "dn.roles" . }}
                        roles.ldap.filter: []
                        memberof.ldap.attribute:
                          - memberOf
                        membership.attribute.type:
                          - DN
                        membership.ldap.attribute:
                          - member
                        membership.user.ldap.attribute:
                          - uid
                        mode:
                          - LDAP_ONLY
                        use.realm.roles.mapping:
                          - "true"
                        user.roles.retrieve.strategy:
                          - LOAD_ROLES_BY_MEMBER_ATTRIBUTE
                config: 
                  pagination: 
                    - "true"
                  fullSyncPeriod: 
                    - "600"
                  connectionPooling: 
                    - "true"
                  usersDn:
                    - {{ include "dn.users" . }}
                  cachePolicy: 
                    - DEFAULT
                  useKerberosForPasswordAuthentication: 
                    - "false"
                  importEnabled: 
                    - "true"
                  enabled: 
                    - "true"
                  usernameLDAPAttribute: 
                    - uid
                  bindDn: 
                    - {{ include "names.ldap_admin_dn" . }}
                  bindCredential: 
                    - {{ include "secrets.ldap_admin_pw" . | quote }}
                  changedSyncPeriod: 
                    - "-1"
                  vendor: 
                    - "other"
                  uuidLDAPAttribute: 
                    - "entryUUID"
                  connectionUrl: 
                    - ldap://openldap.civi-sso.svc.cluster.local:389
                  allowKerberosAuthentication: 
                    - "false"
                  syncRegistrations: 
                    - "true"
                  authType: 
                    - simple
                  debug: 
                    - "false"
                  searchScope: 
                    - "1"
                  useTruststoreSpi: 
                    - ldapsOnly
                  priority: 
                    - "0"
                  trustEmail: 
                    - "false"
                  userObjectClasses: 
                    - inetOrgPerson
                    - organizationalPerson
                  rdnLDAPAttribute: 
                    - uid
                  editMode: 
                    - WRITABLE
                  validatePasswordPolicy: 
                    - "false"
                  batchSizeForSync: 
                    - "1000"
          groups: 
            - name: {{ .Values.admin.group | quote }}
              realmRoles: 
                - admin
          identityProviders:
            - alias: admin-oidc
              displayName: "Admin OIDC"
              providerId: oidc
              enabled: true
              trustEmail: true
              # firstBrokerLoginFlowAlias: "first broker login"
              # storeToken: false
              # authenticateByDefault: false
              # linkOnly: false
              config:
                clientId: {{ include "names.admin_oidc_client" . }}
                clientAuthMethod: client_secret_post
                clientSecret: {{ include "secrets.admin_oidc_client" . }}
                tokenUrl: {{ include "urls.oidc_token" . }}
                authorizationUrl: {{ include "urls.oidc_auth" . }}
                validateSignature: "true"
                useJwksUrl: "true"
                jwksUrl: {{ include "urls.oidc_jwks" . }}
                syncMode: FORCE
                defaultScope: "email groups profile openid"
                guiOrder: 0
                # backchannelSupported: true
          identityProviderMappers:
            - name: admin-oidc-email-mapper
              identityProviderAlias: admin-oidc
              identityProviderMapper: "oidc-user-attribute-idp-mapper"
              config:
                claim: email
                user.attribute: email
                # syncMode: FORCE
            - name: admin-oidc-group-mapper
              identityProviderAlias: admin-oidc
              identityProviderMapper: "oidc-advanced-group-idp-mapper"
              config:
                claims: {{ printf "[{\"key\": \"groups\",\"value\": %s}]" (.Values.admin.group | quote) | quote }}
                group: {{ .Values.admin.group | quote }}
                # syncMode: FORCE
          clients: 
            - clientId: {{ include "names.oidc_client" . | quote }}
              name: {{ printf "%s-oidc-client" .Values.domain }}
              description: {{ printf "SSO for %s" .Values.domain | quote }}
              enabled: true
              clientAuthenticatorType: client-secret
              secret: {{ include "secrets.oidc_client" . | quote }}
              redirectUris: 
                - "*"
              webOrigins: 
                - "*"
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: civi-dex
  namespace: civi-sso
spec:
  interval: 5m
  chart:
    spec:
      chart: dex
      version: '0.8.2'
      sourceRef:
        kind: HelmRepository
        name: dex
        namespace: flux-system
  values:
    envVars:
      - name: IDP_CLIENT_ID
        value: {{ .Values.admin.idp.clientID }}
      - name: IDP_CLIENT_SECRET
        value: {{ .Values.admin.idp.clientSecret }}
    config:
      # See https://dexidp.io/docs/storage/ for more options
      storage:
        type: kubernetes
        config:
          inCluster: true
      issuer: {{ include "urls.oidc_issuer" . }}
      connectors:     
        - type: {{ .Values.admin.idp.type }}
          id: {{ printf "adminIDP-%s" .Values.admin.idp.type }}
          name: {{ printf "adminIDP-%s" .Values.admin.idp.type }}
          config:
            # Credentials can be string literals or pulled from the environment.
            clientID: $IDP_CLIENT_ID
            clientSecret: $IDP_CLIENT_SECRET
            redirectURI: {{ include "urls.oidc_callback" . }}
            # flag which will switch from using the internal GitHub id to the users handle (@mention) as the user id.
            # It is possible for a user to change their own user name but it is very rare for them to do so
            {{ if eq .Values.admin.idp.type "github" -}}
            useLoginAsID: true
            loadAllGroups: true
            {{- else if eq .Values.admin.idp.type "oidc" -}}
            issuerURL: {{ .Values.admin.idp.issuerURL }}
            scopes:
              - profile
              - email
              - groups
            {{- end }}
      staticClients:
        - id: {{ include "names.admin_oidc_client" . }}
          secret: {{ include "secrets.admin_oidc_client" . }}
          name: "Admin OIDC"
          redirectURIs: 
            - {{ include "urls.admin_oidc_callback" . }}
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme
      hosts:
        - host: {{ include "hosts.oidc" . }}
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - hosts:
            - {{ include "hosts.oidc" . }}
          secretName: dex-cert
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: oauth2-proxy
  namespace: civi-sso
spec:
  interval: 5m
  chart:
    spec:
      chart: oauth2-proxy
      version: '6.2.0'
      sourceRef:
        kind: HelmRepository
        name: oauth2-proxy
        namespace: flux-system
  dependsOn:
    - name: keycloak-config
      namespace: civi-sso
  values:
    config:
      clientID: {{ include "names.oidc_client" . }}
      clientSecret: {{ include "secrets.oidc_client" . }}
      cookieSecret: {{ randAlphaNum 32 }}
      configFile: |-
        upstreams = "file:///dev/null"
        whitelist_domains = [ {{ printf ".%s" .Values.domain | quote }} ]
        provider = "oidc"
        provider_display_name = {{ printf "SSO for %s" .Values.domain | quote }}
        oidc_issuer_url = {{ include "urls.idp_realm" . | quote }}
        redirect_url = {{ include "urls.authproxy_callback" . | quote }}
        set_xauthrequest = true
        set_authorization_header = true
        pass_authorization_header = true
        pass_access_token = true
        cookie_samesite = "none"
        cookie_domains = [ {{ printf ".%s" .Values.domain | quote }} ]
        email_domains = "*"
        scope = "email groups profile openid"
        {{ if .Values.test_run -}}
        ssl_insecure_skip_verify = true
        {{- end }}
    # -> see https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview#config-file
    # and https://dexidp.io/docs/custom-scopes-claims-clients/#scopes
    # and https://dexidp.io/docs/custom-scopes-claims-clients/#cross-client-trust-and-authorized-party
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme
      hosts:
        - {{ include "hosts.authproxy" . }}
      tls:
        - hosts:
            - {{ include "hosts.authproxy" . }}
          secretName: oauth2-proxy-cert
